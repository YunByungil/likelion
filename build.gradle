plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco' // jacoco
	id "org.asciidoctor.jvm.convert" version "3.3.2" // rest docs
}

group = 'com'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	/* rest docs */
	asciidoctorExt
}



repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
//	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// Spring Rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.0'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.0'


	// ⭐ Spring boot 3.x이상에서 QueryDsl 패키지를 정의하는 방법
	implementation 'com.querydsl:querydsl-core:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	// jwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'  // 자바 JWT 라이브러리
	implementation 'javax.xml.bind:jaxb-api:2.3.1' // XML 문서와 Java 객체 간 매핑을 자동화
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor' // JwtConfig에서 필요
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.2'

}

/* rest docs */
/* Spring rest docs */
ext {
	asciidocVersion = "3.0.0.RELEASE"
	snippetsDir = file('build/generated-snippets')
}
test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

bootJar {
	dependsOn asciidoctor

	copy {
		from asciidoctor.outputDir
		into "src/main/resources/static/docs"
	}
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}



jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

jacoco {
	toolVersion = "0.8.10"
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'

	jacoco {
		excludes += ["com/likelion/LikelionApplication.class","com/likelion/domain/entity/Q*.*"]
	}
}

jacocoTestReport { // html, csv 형태로 report 제공
	dependsOn test

	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false
	}

	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/likelion/LikelionApplication.class",
					"com/likelion/domain/entity/Q*.*"
			] + Qdomains)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		Qdomains.add(qPattern + '*')
	}
	violationRules {
		rule { // 1번 규칙
			enabled = true // 규칙 활성화여부
			element = 'CLASS' // 적용 대상을 지정한다. 기본값은 BUNDLE (전체 패키지)

//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
//				minimum = 0.50
//			}

			// 라인 커버리지 최소한 80%
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}

			// 빈 줄을 제외한 코드의 라인수 최대 300라인
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 300
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = [] + Qdomains
		}
	}
}
